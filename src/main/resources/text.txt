
서버 입장에서는 Get이나 Post나 어차피 형식이 똑같은 query 형식으로 오기 때문에 그냥 똑같이 getParameter로 정보를 가져오면 됨.
(x-www-url-encoded) 경우에만 인듯
이건 진짜 몰랐네


jsp 만들때
<%@ page contentType="text/html;charset=UTF-8" language="java" %> 이거 적어주고
<% %> 안에 자바 코드 넣어주면 됨
결국 <% %> 안에 코드가 servlet으로 변환되기 때문에 request,나  response같은것을 별도의 import 없이 쓸 수 있음
<%= %> 이거는 자바코드 출력하는 syntax

RequestDispatcher requestDispatcher = request.getRequestDispatcher(viewPath);
requestDispatcher.forward(request,response)
url이 변경되지 않고 서버안에서 내부적으로 view를 바꿔치기 해서 보여주는 개념이라고 알면 될듯?


was 서버 룰에서WEB-INF안에 있는 경우에는 외부에서 호출해도 호출되지 않음 그냥 규약임
그래서 항상 controller(servlet 같은 것)을 통해서만 호출할 수 있게 됨

redirect vs forward
redirect경우 실제로 url이 바뀜. 따라서 클라이언트 단에서 리다이렉션을 인지할 수 있음
하지만 forward의 경우는 서버안에서만 일어나서 인지 불가능

서버의 MVC에서 model은 그냥 request안에있는 내장 setAttribute, getAttribute를 사용해서 해결함.



//FrontController 패턴
spring Web MVC는 DispatcherServlet이 FrontController 패턴으로 구현되어 있음

//Real Spring MVC
DispatcherServlet -> FrameworkServlet -> HttpServletBean -> HttpServlet
스프링부트는 dispatcherServlet을 서블릿으로 자동으로 등록하면서 모든 경로에 대해서 매핑함.

요청 흐름
서블릿 호출 -> Httpservlet (service) 호출 ->
스프링 MVC는 DispatcherServlet 부모인 frameworkServlet에서 service()가 오버라이드 되어 있음
FrameworkServlet.service()가 결국은 DispatcherServlet.doDispatch()/*제일 중요*/를 호출
1. 핸들러 조회
2. 핸들러 어댑터 조회
3. 핸들러 어댑터 통해서 핸들러 실행
4. ModelAndView 호출
5. render(modelAndView, request,response) 함수 실행
6. viewResolver를 통해서 뷰를 찾음
7. View반환



//Spring mvc v1
@Controller
-> 스프링이 자동으로 스프링 빈으로 등록, 내부에 @Component가 있어서 가능함
-> 스ㅍ링 MVC에서 어노테이션 기반 컨틀롤러 인식 -> RequestMappingHandlerMapping에서 해당 클래스를 인식 할 수 있게 한다는 뜻
RequestMappingHandlerMapping에서(@RequestMapping, @Controller 어노테이션이 클래스 레벨에 붙어 있을 겨우 인식 가능)
따라서 @Component,@RequestMapping해주면 RequestMappingHandlerMapping이 인식이 가능해짐
@RequestMapping
-> 요청 정보를 매빙
ModelAndView
-> 모델과 뷰를 반환


//Spring MVC v2
@RequestMapping이 클라스 단위에 붙어 있는게 아니기때문에
@Controller를 하나로 통합

//Spring MVC v3
@Controller 어노테이션 기반은 그냥 string을 반환하던 ModelAndView를 반환하던 상관이 없음
